#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Google Ads Automation - Automa√ß√£o de Cria√ß√£o de Campanhas
Respons√°vel pela automa√ß√£o do navegador para criar campanhas no Google Ads
"""

import time
import logging
from typing import Dict, Optional, List
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import undetected_chromedriver as uc
from selenium_stealth import stealth
from adspower_manager import AdsPowerManager

class GoogleAdsAutomation:
    """Automa√ß√£o para cria√ß√£o de campanhas no Google Ads"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.driver = None
        self.wait = None
        self.adspower_manager = AdsPowerManager()
        
        # Configura√ß√µes padr√£o
        self.default_timeout = 30
        self.default_delay = 3
        self.max_retries = 3
        self.retry_delay = 2
        self.current_language = 'auto'  # Detectar automaticamente
        
        # Seletores multil√≠ngues super robustos - Portugu√™s, Ingl√™s, Espanhol
        self.multilingual_selectors = {
            'campaigns_menu': {
                'pt': ["//span[contains(text(), 'Campanhas')]", "//a[contains(text(), 'Campanhas')]", "//div[contains(@data-value, 'campaigns')]"],
                'en': ["//span[contains(text(), 'Campaigns')]", "//a[contains(text(), 'Campaigns')]", "//div[contains(@data-value, 'campaigns')]"],
                'es': ["//span[contains(text(), 'Campa√±as')]", "//a[contains(text(), 'Campa√±as')]", "//div[contains(@data-value, 'campaigns')]"]
            },
            'new_campaign_btn': {
                'pt': ["//button[contains(@aria-label, 'Nova campanha')]", "//button[contains(text(), '+')]", "//button[contains(@class, 'mdc-fab')]", "//button[contains(@class, 'create')]"],
                'en': ["//button[contains(@aria-label, 'New campaign')]", "//button[contains(text(), '+')]", "//button[contains(@class, 'mdc-fab')]", "//button[contains(@class, 'create')]"],
                'es': ["//button[contains(@aria-label, 'Nueva campa√±a')]", "//button[contains(text(), '+')]", "//button[contains(@class, 'mdc-fab')]", "//button[contains(@class, 'create')]"]
            },
            'objectives': {
                'sem_orientacao': {
                    'pt': ["//button[contains(text(), 'sem orienta√ß√£o')]", "//div[contains(text(), 'sem orienta√ß√£o')]", "//button[contains(text(), 'Criar campanha sem orienta√ß√£o')]"],
                    'en': ["//button[contains(text(), 'without goal')]", "//div[contains(text(), 'without goal')]", "//button[contains(text(), 'Create campaign without goal')]"],
                    'es': ["//button[contains(text(), 'sin orientaci√≥n')]", "//div[contains(text(), 'sin orientaci√≥n')]", "//button[contains(text(), 'Crear campa√±a sin orientaci√≥n')]"]
                },
                'vendas': {
                    'pt': ["//div[contains(text(), 'Vendas')]", "//button[contains(text(), 'Vendas')]"],
                    'en': ["//div[contains(text(), 'Sales')]", "//button[contains(text(), 'Sales')]"],
                    'es': ["//div[contains(text(), 'Ventas')]", "//button[contains(text(), 'Ventas')]"]
                },
                'leads': {
                    'pt': ["//div[contains(text(), 'Leads')]", "//button[contains(text(), 'Leads')]"],
                    'en': ["//div[contains(text(), 'Leads')]", "//button[contains(text(), 'Leads')]"],
                    'es': ["//div[contains(text(), 'Clientes potenciales')]", "//button[contains(text(), 'Leads')]"]
                },
                'trafego': {
                    'pt': ["//div[contains(text(), 'Tr√°fego do site')]", "//div[contains(text(), 'Tr√°fego do website')]"],
                    'en': ["//div[contains(text(), 'Website traffic')]", "//div[contains(text(), 'Traffic')]"],
                    'es': ["//div[contains(text(), 'Tr√°fico del sitio web')]", "//div[contains(text(), 'Tr√°fico')]"]
                }
            },
            'search_network': {
                'pt': ["//div[contains(text(), 'Pesquisa')]", "//button[contains(text(), 'Pesquisa')]", "//div[contains(text(), 'Rede de Pesquisa')]"],
                'en': ["//div[contains(text(), 'Search')]", "//button[contains(text(), 'Search')]", "//div[contains(text(), 'Search Network')]"],
                'es': ["//div[contains(text(), 'B√∫squeda')]", "//button[contains(text(), 'B√∫squeda')]", "//div[contains(text(), 'Red de B√∫squeda')]"]
            },
            'continue_btn': {
                'pt': ["//button[contains(text(), 'Continuar')]", "//button[contains(text(), 'Pr√≥ximo')]", "//button[contains(@aria-label, 'Continuar')]"],
                'en': ["//button[contains(text(), 'Continue')]", "//button[contains(text(), 'Next')]", "//button[contains(@aria-label, 'Continue')]"],
                'es': ["//button[contains(text(), 'Continuar')]", "//button[contains(text(), 'Siguiente')]", "//button[contains(@aria-label, 'Continuar')]"]
            },
            'publish_btn': {
                'pt': ["//button[contains(text(), 'Publicar')]", "//button[contains(text(), 'Criar campanha')]", "//button[contains(text(), 'Finalizar')]"],
                'en': ["//button[contains(text(), 'Publish')]", "//button[contains(text(), 'Create campaign')]", "//button[contains(text(), 'Finish')]"],
                'es': ["//button[contains(text(), 'Publicar')]", "//button[contains(text(), 'Crear campa√±a')]", "//button[contains(text(), 'Finalizar')]"]
            },
            'input_fields': {
                'campaign_name': {
                    'pt': ["//input[contains(@aria-label, 'nome')]", "//input[contains(@placeholder, 'nome')]"],
                    'en': ["//input[contains(@aria-label, 'name')]", "//input[contains(@placeholder, 'name')]"],
                    'es': ["//input[contains(@aria-label, 'nombre')]", "//input[contains(@placeholder, 'nombre')]"]
                },
                'budget': {
                    'pt': ["//input[contains(@aria-label, 'or√ßamento')]", "//input[contains(@placeholder, 'or√ßamento')]"],
                    'en': ["//input[contains(@aria-label, 'budget')]", "//input[contains(@placeholder, 'budget')]"],
                    'es': ["//input[contains(@aria-label, 'presupuesto')]", "//input[contains(@placeholder, 'presupuesto')]"]
                },
                'location': {
                    'pt': ["//input[contains(@aria-label, 'localiza√ß√£o')]", "//input[contains(@placeholder, 'localiza√ß√£o')]"],
                    'en': ["//input[contains(@aria-label, 'location')]", "//input[contains(@placeholder, 'location')]"],
                    'es': ["//input[contains(@aria-label, 'ubicaci√≥n')]", "//input[contains(@placeholder, 'ubicaci√≥n')]"]
                },
                'keywords': {
                    'pt': ["//textarea[contains(@aria-label, 'palavra')]", "//input[contains(@aria-label, 'palavra')]"],
                    'en': ["//textarea[contains(@aria-label, 'keyword')]", "//input[contains(@aria-label, 'keyword')]"],
                    'es': ["//textarea[contains(@aria-label, 'palabra clave')]", "//input[contains(@aria-label, 'palabra clave')]"]
                },
                'headlines': {
                    'pt': ["//input[contains(@aria-label, 'T√≠tulo')]", "//input[contains(@placeholder, 'T√≠tulo')]"],
                    'en': ["//input[contains(@aria-label, 'Headline')]", "//input[contains(@placeholder, 'Headline')]"],
                    'es': ["//input[contains(@aria-label, 'T√≠tulo')]", "//input[contains(@placeholder, 'T√≠tulo')]"]
                },
                'descriptions': {
                    'pt': ["//textarea[contains(@aria-label, 'Descri√ß√£o')]", "//textarea[contains(@placeholder, 'Descri√ß√£o')]"],
                    'en': ["//textarea[contains(@aria-label, 'Description')]", "//textarea[contains(@placeholder, 'Description')]"],
                    'es': ["//textarea[contains(@aria-label, 'Descripci√≥n')]", "//textarea[contains(@placeholder, 'Descripci√≥n')]"]
                },
                'url': {
                    'pt': ["//input[contains(@aria-label, 'URL')]", "//input[contains(@placeholder, 'URL')]"],
                    'en': ["//input[contains(@aria-label, 'URL')]", "//input[contains(@placeholder, 'URL')]"],
                    'es': ["//input[contains(@aria-label, 'URL')]", "//input[contains(@placeholder, 'URL')]"]
                }
            }
        }
    
    def setup_driver(self, browser_info: Dict, headless: bool = False) -> bool:
        """üîß Configurar driver SUPER ROBUSTO para controlar browser AdsPower com TOTAL EFIC√ÅCIA"""
        try:
            self.logger.info("üîß INICIANDO setup do driver com controle EXTREMAMENTE CALCULADO...")
            
            if not browser_info:
                self.logger.error("‚ùå Informa√ß√µes do browser n√£o fornecidas")
                return False
            
            # Log das informa√ß√µes do browser para debugging
            self.logger.info(f"üìã Informa√ß√µes do browser recebidas: {browser_info}")
            
            chrome_options = Options()
            
            # Configura√ß√µes anti-detec√ß√£o PREMIUM
            self.logger.info("üõ°Ô∏è Configurando op√ß√µes anti-detec√ß√£o...")
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-blink-features=AutomationControlled')
            chrome_options.add_argument('--disable-extensions-file-access-check')
            chrome_options.add_argument('--disable-extensions-http-throttling')
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            if headless:
                chrome_options.add_argument('--headless')
                self.logger.info("üëª Modo headless ativado")
            
            # CONEX√ÉO EXTREMAMENTE ROBUSTA ao browser AdsPower
            self.logger.info("üîå CONFIGURANDO conex√£o EXTREMAMENTE ROBUSTA ao AdsPower...")
            
            # Extrair debug port com m√∫ltiplas tentativas
            debug_port = None
            debug_fields = ['debug_port', 'debugPort', 'remote_debugging_port', 'port', 'selenium_port']
            
            for field in debug_fields:
                if field in browser_info and browser_info[field]:
                    debug_port = str(browser_info[field])
                    self.logger.info(f"‚úÖ Debug port encontrado em '{field}': {debug_port}")
                    break
            
            if not debug_port:
                self.logger.error("üí• ERRO CR√çTICO: Debug port n√£o encontrado!")
                self.logger.error(f"üìã Informa√ß√µes dispon√≠veis: {list(browser_info.keys())}")
                
                # Tentar portas comuns como fallback
                common_ports = ["9222", "9223", "9224", "9225"]
                self.logger.warning("üîÑ Tentando portas comuns como fallback...")
                
                for port in common_ports:
                    try:
                        test_url = f"http://127.0.0.1:{port}/json"
                        import requests
                        response = requests.get(test_url, timeout=2)
                        if response.status_code == 200:
                            debug_port = port
                            self.logger.info(f"‚úÖ FALLBACK SUCESSO: Porta {port} respondendo!")
                            break
                    except:
                        continue
                
                if not debug_port:
                    self.logger.error("üí• FALHA TOTAL: Nenhuma porta de debug encontrada ou funcional")
                    # √öltimo recurso: tentar com porta padr√£o mesmo assim
                    debug_port = "9222"
                    self.logger.warning(f"üö® √öLTIMO RECURSO: Usando porta padr√£o {debug_port}")
            
            # Configurar conex√£o com verifica√ß√£o
            debugger_address = f"127.0.0.1:{debug_port}"
            self.logger.info(f"üéØ Configurando debugger address: {debugger_address}")
            
            # VERIFICAR se a porta est√° realmente ativa
            try:
                import requests
                test_url = f"http://127.0.0.1:{debug_port}/json"
                self.logger.info(f"üß™ TESTANDO conex√£o: {test_url}")
                
                response = requests.get(test_url, timeout=5)
                if response.status_code == 200:
                    tabs = response.json()
                    self.logger.info(f"‚úÖ DEBUG PORT ATIVO: {len(tabs)} aba(s) detectada(s)")
                    for i, tab in enumerate(tabs[:3]):  # Mostrar apenas 3 primeiras
                        self.logger.info(f"   üìÑ Aba {i+1}: {tab.get('title', 'Sem t√≠tulo')[:50]}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è DEBUG PORT responde com status {response.status_code} - tentando conectar mesmo assim")
                    # N√£o retornar False aqui - tentar conectar mesmo assim
                    
            except Exception as test_error:
                self.logger.error(f"üí• ERRO ao testar debug port: {str(test_error)}")
                return False
            
            # Configurar Chrome Options com debug port confirmado
            chrome_options.add_experimental_option("debuggerAddress", debugger_address)
            
            # M√âTODO PRINCIPAL: Conectar via debugger address
            self.logger.info("üöÄ M√âTODO PRINCIPAL: Criando WebDriver com debugger address...")
            
            connection_successful = False
            
            try:
                from selenium import webdriver
                self.driver = webdriver.Chrome(options=chrome_options)
                
                if self.driver:
                    self.logger.info("‚úÖ WebDriver criado com SUCESSO!")
                    connection_successful = True
                else:
                    self.logger.error("‚ùå WebDriver retornou None")
                    
            except Exception as main_connection_error:
                self.logger.error(f"üí• FALHA no m√©todo principal: {str(main_connection_error)}")
                self.logger.info("üîÑ Tentando m√©todo alternativo...")
                
                # M√âTODO ALTERNATIVO: Tentar sem remote debugging
                try:
                    from selenium import webdriver as alt_webdriver
                    alternative_options = Options()
                    
                    # Op√ß√µes b√°sicas apenas
                    alternative_options.add_argument('--no-sandbox')
                    alternative_options.add_argument('--disable-dev-shm-usage')
                    alternative_options.add_argument('--disable-blink-features=AutomationControlled')
                    
                    # Tentar conectar ao browser existente via processo
                    # (m√©todo mais b√°sico que pode funcionar)
                    self.logger.info("üîÑ M√âTODO ALTERNATIVO: Conectando via processo b√°sico...")
                    
                    # Aguardar um pouco e tentar novamente
                    time.sleep(3)
                    alternative_options.add_experimental_option("debuggerAddress", debugger_address)
                    
                    self.driver = alt_webdriver.Chrome(options=alternative_options)
                    
                    if self.driver:
                        self.logger.info("‚úÖ M√âTODO ALTERNATIVO SUCESSO!")
                        connection_successful = True
                    
                except Exception as alternative_error:
                    self.logger.error(f"üí• M√âTODO ALTERNATIVO tamb√©m falhou: {str(alternative_error)}")
            
            if not connection_successful or not self.driver:
                self.logger.error("üí• FALHA TOTAL: Todos os m√©todos de conex√£o falharam!")
                self.logger.error("üîß POSS√çVEIS SOLU√á√ïES:")
                self.logger.error("   1. Verifique se AdsPower permite automa√ß√£o")
                self.logger.error("   2. Verifique se remote debugging est√° habilitado")
                self.logger.error("   3. Tente reiniciar o AdsPower")
                return False
            
            # Configurar WebDriverWait (s√≥ se driver existe)
            if self.driver:
                self.wait = WebDriverWait(self.driver, self.default_timeout)
            self.logger.info(f"‚è±Ô∏è WebDriverWait configurado com timeout: {self.default_timeout}s")
            
            # BATERIA DE TESTES CR√çTICOS: Verificar controle TOTAL do browser
            self.logger.info("üß™ BATERIA DE TESTES CR√çTICOS: Verificando controle COMPLETO...")
            
            test_results = []
            
            # Verifica√ß√£o adicional de seguran√ßa
            if not self.driver:
                self.logger.error("üí• ERRO CR√çTICO: Driver est√° None ap√≥s conex√£o supostamente bem-sucedida")
                return False
            
            try:
                # TESTE 1: Obter URL atual
                current_url = self.driver.current_url
                test_results.append(("URL atual", "SUCESSO", current_url))
                self.logger.info(f"‚úÖ TESTE 1 SUCESSO: URL atual obtida: {current_url}")
            except Exception as url_error:
                test_results.append(("URL atual", "FALHA", str(url_error)))
                self.logger.error(f"‚ùå TESTE 1 FALHA: {str(url_error)}")
            
            try:
                # TESTE 2: Obter t√≠tulo
                title = self.driver.title or "Sem t√≠tulo" if self.driver else "Driver None"
                test_results.append(("T√≠tulo", "SUCESSO", title))
                self.logger.info(f"‚úÖ TESTE 2 SUCESSO: T√≠tulo obtido: {title}")
            except Exception as title_error:
                test_results.append(("T√≠tulo", "FALHA", str(title_error)))
                self.logger.error(f"‚ùå TESTE 2 FALHA: {str(title_error)}")
            
            try:
                # TESTE 3: Obter abas
                windows = self.driver.window_handles if self.driver else []
                test_results.append(("Abas", "SUCESSO", f"{len(windows)} abas"))
                self.logger.info(f"‚úÖ TESTE 3 SUCESSO: {len(windows)} aba(s) detectada(s)")
            except Exception as windows_error:
                test_results.append(("Abas", "FALHA", str(windows_error)))
                self.logger.error(f"‚ùå TESTE 3 FALHA: {str(windows_error)}")
            
            try:
                # TESTE 4: JavaScript b√°sico
                if self.driver:
                    js_result = self.driver.execute_script("return 'CONTROLE_OK';")
                    if js_result == 'CONTROLE_OK':
                        test_results.append(("JavaScript", "SUCESSO", "Controle confirmado"))
                        self.logger.info("‚úÖ TESTE 4 SUCESSO: JavaScript executado com sucesso")
                    else:
                        test_results.append(("JavaScript", "PARCIAL", f"Resultado: {js_result}"))
                        self.logger.warning(f"‚ö†Ô∏è TESTE 4 PARCIAL: Resultado inesperado: {js_result}")
                else:
                    test_results.append(("JavaScript", "FALHA", "Driver √© None"))
            except Exception as js_error:
                test_results.append(("JavaScript", "FALHA", str(js_error)))
                self.logger.error(f"‚ùå TESTE 4 FALHA: {str(js_error)}")
            
            try:
                # TESTE 5: Navega√ß√£o b√°sica (teste crucial)
                if self.driver:
                    self.logger.info("üß™ TESTE 5 CR√çTICO: Tentando navega√ß√£o b√°sica...")
                    original_url = self.driver.current_url
                    self.driver.execute_script("window.history.replaceState({}, '', window.location.href);")
                    test_results.append(("Navega√ß√£o b√°sica", "SUCESSO", "Comando aceito"))
                    self.logger.info("‚úÖ TESTE 5 SUCESSO: Navega√ß√£o b√°sica funcional")
                else:
                    test_results.append(("Navega√ß√£o b√°sica", "FALHA", "Driver √© None"))
            except Exception as nav_error:
                test_results.append(("Navega√ß√£o b√°sica", "FALHA", str(nav_error)))
                self.logger.error(f"‚ùå TESTE 5 FALHA: {str(nav_error)}")
            
            # AN√ÅLISE DOS RESULTADOS DOS TESTES
            self.logger.info("üìä AN√ÅLISE DOS RESULTADOS DOS TESTES:")
            successful_tests = 0
            total_tests = len(test_results)
            
            for test_name, result, details in test_results:
                if result == "SUCESSO":
                    successful_tests += 1
                    self.logger.info(f"   ‚úÖ {test_name}: {details}")
                elif result == "PARCIAL":
                    successful_tests += 0.5
                    self.logger.warning(f"   ‚ö†Ô∏è {test_name}: {details}")
                else:
                    self.logger.error(f"   ‚ùå {test_name}: {details}")
            
            success_rate = (successful_tests / total_tests) * 100
            self.logger.info(f"üìà TAXA DE SUCESSO: {success_rate:.1f}% ({successful_tests}/{total_tests})")
            
            if success_rate < 60:
                self.logger.error("üí• CONTROLE INSUFICIENTE: Muitos testes falharam")
                return False
            elif success_rate < 100:
                self.logger.warning("‚ö†Ô∏è CONTROLE PARCIAL: Alguns problemas detectados, mas continuando...")
            else:
                self.logger.info("üéâ CONTROLE TOTAL CONFIRMADO: Todos os testes passaram!")
            
            # Maximizar janela com verifica√ß√£o
            try:
                if self.driver:
                    self.logger.info("üì∫ Maximizando janela do browser...")
                    self.driver.maximize_window()
                    time.sleep(1)  # Aguardar maximiza√ß√£o
                    self.logger.info("‚úÖ Janela maximizada com sucesso")
                else:
                    self.logger.warning("‚ö†Ô∏è N√£o √© poss√≠vel maximizar - driver √© None")
            except Exception as max_error:
                self.logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel maximizar janela: {str(max_error)}")
            
            self.logger.info("üéâ Driver configurado com TOTAL SUCESSO e CONTROLE VERIFICADO!")
            return True
            
        except Exception as e:
            self.logger.error(f"üí• ERRO CR√çTICO ao configurar driver: {str(e)}")
            self.logger.error(f"üìç Detalhes do erro: {type(e).__name__}")
            return False
    
    def prepare_browser_for_navigation(self) -> bool:
        """üõ†Ô∏è Preparar browser CALCULADAMENTE para navega√ß√£o eficaz"""
        try:
            self.logger.info("üõ†Ô∏è PREPARANDO browser com controle EXTREMAMENTE CALCULADO...")
            
            if not self.driver:
                self.logger.error("‚ùå Driver n√£o est√° dispon√≠vel")
                return False
            
            # ETAPA 1: Verificar estado atual do browser
            self.logger.info("üìä ETAPA 1: Verificando estado atual do browser...")
            
            try:
                current_url = self.driver.current_url
                title = self.driver.title or "Sem t√≠tulo"
                windows = self.driver.window_handles
                
                self.logger.info(f"üìç URL atual: {current_url}")
                self.logger.info(f"üìÑ T√≠tulo atual: {title}")
                self.logger.info(f"ü™ü N√∫mero de abas: {len(windows)}")
                
            except Exception as state_error:
                self.logger.error(f"‚ùå Erro ao verificar estado: {str(state_error)}")
                return False
            
            # ETAPA 2: Abrir nova aba se necess√°rio (estrat√©gia mais segura)
            self.logger.info("üÜï ETAPA 2: Abrindo nova aba para navega√ß√£o limpa...")
            
            try:
                # Abrir nova aba usando JavaScript (mais confi√°vel)
                self.driver.execute_script("window.open('about:blank', '_blank');")
                time.sleep(2)  # Aguardar aba abrir
                
                # Mudar para a nova aba
                new_windows = self.driver.window_handles
                if len(new_windows) > len(windows):
                    self.driver.switch_to.window(new_windows[-1])  # √öltima aba (nova)
                    self.logger.info("‚úÖ Nova aba criada e ativada com sucesso")
                else:
                    self.logger.warning("‚ö†Ô∏è Nova aba n√£o detectada, usando aba atual")
                
            except Exception as tab_error:
                self.logger.warning(f"‚ö†Ô∏è Erro ao criar nova aba: {str(tab_error)}")
                self.logger.info("üîÑ Continuando com aba atual...")
            
            # ETAPA 3: Verificar controle da aba ativa
            self.logger.info("üéØ ETAPA 3: Verificando controle da aba ativa...")
            
            try:
                # Executar teste simples de JavaScript
                test_result = self.driver.execute_script("return document.readyState;")
                self.logger.info(f"‚úÖ Estado do documento: {test_result}")
                
                # Verificar se consegue acessar elementos b√°sicos
                body_present = self.driver.execute_script("return document.body !== null;")
                self.logger.info(f"‚úÖ Body presente: {body_present}")
                
            except Exception as control_error:
                self.logger.error(f"‚ùå Falha no controle da aba: {str(control_error)}")
                return False
            
            # ETAPA 4: Preparar para navega√ß√£o via barra de endere√ßo
            self.logger.info("üîó ETAPA 4: Preparando navega√ß√£o direta...")
            
            try:
                # Focar na janela para garantir que est√° ativa
                self.driver.switch_to.window(self.driver.current_window_handle)
                
                # Aguardar um pouco para estabilizar
                time.sleep(1)
                
                self.logger.info("‚úÖ Browser preparado para navega√ß√£o calculada")
                
            except Exception as prep_error:
                self.logger.error(f"‚ùå Erro na prepara√ß√£o final: {str(prep_error)}")
                return False
            
            self.logger.info("üéâ Browser TOTALMENTE PREPARADO para navega√ß√£o eficaz!")
            return True
            
        except Exception as e:
            self.logger.error(f"üí• ERRO CR√çTICO na prepara√ß√£o do browser: {str(e)}")
            return False
    
    def navigate_with_extreme_calculation(self, target_url: str) -> bool:
        """üßÆ Navega√ß√£o EXTREMAMENTE CALCULADA e EFICAZ"""
        try:
            self.logger.info(f"üßÆ INICIANDO navega√ß√£o EXTREMAMENTE CALCULADA para: {target_url}")
            
            if not self.driver:
                self.logger.error("‚ùå Driver n√£o dispon√≠vel")
                return False
            
            # M√âTODO 1: Navega√ß√£o direta (mais r√°pida)
            self.logger.info("üöÄ M√âTODO 1: Tentativa de navega√ß√£o direta...")
            try:
                self.driver.get(target_url)
                time.sleep(3)  # Aguardar carregamento
                
                # Verificar se deu certo
                final_url = self.driver.current_url
                if target_url.replace("https://", "").replace("http://", "") in final_url:
                    self.logger.info("‚úÖ M√âTODO 1 SUCESSO: Navega√ß√£o direta funcionou")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è M√âTODO 1 FALHOU: URL esperada n√£o alcan√ßada. Final: {final_url}")
            
            except Exception as method1_error:
                self.logger.warning(f"‚ö†Ô∏è M√âTODO 1 ERRO: {str(method1_error)}")
            
            # M√âTODO 2: Navega√ß√£o via JavaScript (alternativa)
            self.logger.info("üîß M√âTODO 2: Tentativa via JavaScript...")
            try:
                js_code = f"window.location.href = '{target_url}';"
                self.driver.execute_script(js_code)
                time.sleep(4)  # Aguardar mais tempo para JS
                
                # Verificar se deu certo
                final_url = self.driver.current_url
                if target_url.replace("https://", "").replace("http://", "") in final_url:
                    self.logger.info("‚úÖ M√âTODO 2 SUCESSO: Navega√ß√£o via JavaScript funcionou")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è M√âTODO 2 FALHOU: URL esperada n√£o alcan√ßada. Final: {final_url}")
            
            except Exception as method2_error:
                self.logger.warning(f"‚ö†Ô∏è M√âTODO 2 ERRO: {str(method2_error)}")
            
            # M√âTODO 3: Simular intera√ß√£o com barra de endere√ßo (mais manual)
            self.logger.info("‚å®Ô∏è M√âTODO 3: Simulando intera√ß√£o manual com barra de endere√ßo...")
            try:
                # Tentar usar Ctrl+L para focar na barra de endere√ßo
                from selenium.webdriver.common.action_chains import ActionChains
                from selenium.webdriver.common.keys import Keys
                
                actions = ActionChains(self.driver)
                actions.key_down(Keys.CONTROL).send_keys('l').key_up(Keys.CONTROL).perform()
                time.sleep(1)
                
                # Digitar URL
                actions = ActionChains(self.driver)
                actions.send_keys(target_url).send_keys(Keys.RETURN).perform()
                time.sleep(5)  # Aguardar navega√ß√£o
                
                # Verificar se deu certo
                final_url = self.driver.current_url
                if target_url.replace("https://", "").replace("http://", "") in final_url:
                    self.logger.info("‚úÖ M√âTODO 3 SUCESSO: Simula√ß√£o manual funcionou")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è M√âTODO 3 FALHOU: URL esperada n√£o alcan√ßada. Final: {final_url}")
            
            except Exception as method3_error:
                self.logger.warning(f"‚ö†Ô∏è M√âTODO 3 ERRO: {str(method3_error)}")
            
            # Se chegou aqui, todos os m√©todos falharam
            self.logger.error("üí• FALHA TOTAL: Todos os 3 m√©todos de navega√ß√£o falharam")
            return False
            
        except Exception as e:
            self.logger.error(f"üí• ERRO CR√çTICO na navega√ß√£o calculada: {str(e)}")
            return False
    
    def navigate_to_google_ads(self) -> bool:
        """üåê Navegar para Google Ads usando o sistema EXTREMAMENTE CALCULADO"""
        try:
            self.logger.info("üåê INICIANDO navega√ß√£o para Google Ads com sistema CALCULADO...")
            
            if not self.driver:
                self.logger.error("‚ùå Driver n√£o est√° inicializado!")
                return False
            
            # PRIMEIRO: Preparar browser para navega√ß√£o eficaz
            self.logger.info("üõ†Ô∏è Preparando browser para controle total...")
            if not self.prepare_browser_for_navigation():
                self.logger.error("‚ùå FALHA na prepara√ß√£o do browser")
                return False
            
            # SEGUNDO: Usar navega√ß√£o extremamente calculada
            target_urls = [
                "https://ads.google.com/aw/",
                "https://ads.google.com/home/", 
                "https://ads.google.com/",
                "https://ads.google.com/aw/campaigns/",
                "https://ads.google.com/aw/overview/"
            ]
            
            for attempt, target_url in enumerate(target_urls, 1):
                self.logger.info(f"üéØ TENTATIVA {attempt}: Navega√ß√£o CALCULADA para {target_url}")
                
                # Usar o m√©todo extremamente calculado
                if self.navigate_with_extreme_calculation(target_url):
                    self.logger.info(f"‚úÖ SUCESSO na tentativa {attempt}!")
                    
                    # Verificar qualidade da navega√ß√£o com an√°lise detalhada
                    try:
                        time.sleep(3)  # Aguardar estabiliza√ß√£o
                        
                        final_url = self.driver.current_url
                        title = self.driver.title or ""
                        page_source = self.driver.page_source.lower()
                        
                        self.logger.info(f"üéØ URL final: {final_url}")
                        self.logger.info(f"üìÑ T√≠tulo: {title}")
                        
                        # An√°lise detalhada dos indicadores de sucesso
                        success_indicators = [
                            ("campanhas" in page_source, "palavra 'campanhas' encontrada"),
                            ("campaigns" in page_source, "palavra 'campaigns' encontrada"), 
                            ("google ads" in title.lower(), "t√≠tulo cont√©m 'Google Ads'"),
                            ("ads.google.com" in final_url.lower(), "URL cont√©m 'ads.google.com'"),
                            ("overview" in final_url.lower(), "URL cont√©m 'overview'"),
                            ("campaign" in page_source, "palavra 'campaign' encontrada")
                        ]
                        
                        success_count = 0
                        for indicator_found, description in success_indicators:
                            if indicator_found:
                                self.logger.info(f"‚úÖ INDICADOR: {description}")
                                success_count += 1
                        
                        # Verificar status de login
                        login_indicators = ["entrar", "sign in", "login"]
                        login_detected = any(indicator in page_source for indicator in login_indicators)
                        
                        if login_detected:
                            self.logger.warning(f"‚ö†Ô∏è P√°gina de login detectada - tentando pr√≥xima URL...")
                            continue
                        elif success_count >= 2:
                            self.logger.info(f"üéâ NAVEGA√á√ÉO CALCULADA CONCLU√çDA COM SUCESSO! {success_count} indicadores")
                            
                            # Screenshot final de sucesso
                            self.take_screenshot("navegacao_calculada_sucesso.png")
                            return True
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Apenas {success_count} indicadores - tentando pr√≥xima URL...")
                            continue
                            
                    except Exception as analysis_error:
                        self.logger.error(f"‚ùå Erro na an√°lise p√≥s-navega√ß√£o: {str(analysis_error)}")
                        continue
                
                else:
                    self.logger.warning(f"‚ö†Ô∏è Tentativa {attempt} falhou - tentando pr√≥xima...")
                    time.sleep(2)  # Pausa entre tentativas
            
            # Se chegou aqui, todas as tentativas falharam
            self.logger.error("üí• FALHA TOTAL: Todas as tentativas de navega√ß√£o calculada falharam")
            self.take_screenshot("navegacao_calculada_falha_total.png")
            return False
            
        except Exception as e:
            self.logger.error(f"üí• ERRO CR√çTICO na navega√ß√£o calculada: {str(e)}")
            self.take_screenshot("navegacao_calculada_erro_critico.png")
            return False
    
    def close_popups(self):
        """Fechar popups e elementos que podem atrapalhar"""
        try:
            # Lista de seletores de popups comuns do Google Ads
            popup_selectors = [
                # Popup de cookies
                "//button[contains(text(), 'Aceitar')] | //button[contains(text(), 'Accept')]",
                "//button[contains(text(), 'OK')] | //button[contains(text(), 'Ok')]",
                "//button[contains(@aria-label, 'Fechar')] | //button[contains(@aria-label, 'Close')]",
                "//div[contains(@class, 'close')] | //button[contains(@class, 'close')]",
                # Popup de tour/introdu√ß√£o
                "//button[contains(text(), 'Pular')] | //button[contains(text(), 'Skip')]",
                "//button[contains(text(), 'N√£o agora')] | //button[contains(text(), 'Not now')]",
                "//button[contains(text(), 'Dispensar')] | //button[contains(text(), 'Dismiss')]",
                # Popup de notifica√ß√µes
                "//button[contains(text(), 'Bloquear')] | //button[contains(text(), 'Block')]",
                "//button[contains(text(), 'Permitir')] | //button[contains(text(), 'Allow')]",
                # X para fechar
                "//button[@aria-label='Fechar'] | //button[@aria-label='Close']",
                "//span[text()='√ó'] | //span[text()='‚úï']"
            ]
            
            for selector in popup_selectors:
                try:
                    # Tentar encontrar e clicar no popup (timeout curto)
                    if self.driver and self.wait:
                        element = WebDriverWait(self.driver, 2).until(
                            EC.element_to_be_clickable((By.XPATH, selector))
                        )
                        element.click()
                        self.logger.info(f"Popup fechado: {selector}")
                        time.sleep(1)
                except:
                    continue  # Se n√£o encontrar, continua para o pr√≥ximo
                    
        except Exception as e:
            self.logger.debug(f"Erro ao fechar popups: {str(e)}")
            # N√£o √© erro cr√≠tico, continua a execu√ß√£o
    
    def wait_for_page_load(self, timeout: int | None = None) -> bool:
        """Aguardar carregamento da p√°gina"""
        if timeout is None:
            timeout = self.default_timeout or 30
        
        try:
            if self.driver:
                WebDriverWait(self.driver, timeout).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            time.sleep(2)  # Aguardar um pouco mais para elementos din√¢micos
            return True
        except TimeoutException:
            self.logger.warning("Timeout ao aguardar carregamento da p√°gina")
            return False
    
    def click_element_safe(self, selector: str, by_type: str = "xpath") -> bool:
        """Clicar em elemento com tratamento de erro"""
        try:
            if not self.wait or not self.driver:
                return False
                
            if by_type == "xpath":
                element = self.wait.until(EC.element_to_be_clickable((By.XPATH, selector)))
            else:
                element = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
            
            # Scroll at√© o elemento se necess√°rio
            self.driver.execute_script("arguments[0].scrollIntoView(true);", element)
            time.sleep(1)
            
            # Tentar clicar
            element.click()
            time.sleep(self.default_delay)
            return True
            
        except (TimeoutException, NoSuchElementException):
            self.logger.warning(f"Elemento n√£o encontrado: {selector}")
            return False
        except Exception as e:
            self.logger.error(f"Erro ao clicar no elemento {selector}: {str(e)}")
            return False
    
    def input_text_safe(self, selector: str, text: str, by_type: str = "css") -> bool:
        """Inserir texto em campo com tratamento de erro"""
        try:
            if not self.wait or not self.driver:
                return False
                
            if by_type == "xpath":
                element = self.wait.until(EC.presence_of_element_located((By.XPATH, selector)))
            else:
                element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
            
            # Limpar campo e inserir texto
            element.clear()
            time.sleep(0.5)
            element.send_keys(text)
            time.sleep(1)
            return True
            
        except (TimeoutException, NoSuchElementException):
            self.logger.warning(f"Campo n√£o encontrado: {selector}")
            return False
        except Exception as e:
            self.logger.error(f"Erro ao inserir texto no campo {selector}: {str(e)}")
            return False
    
    def create_campaign_step_by_step(self, config: Dict) -> bool:
        """üöÄ Criar campanha passo a passo com LOGS SUPER DETALHADOS"""
        try:
            self.logger.info("üöÄ INICIANDO cria√ß√£o de campanha step-by-step...")
            
            # PASSO 1: Navegar para campanhas e tentar nova campanha
            self.logger.info("üîç PASSO 1: Procurando bot√£o 'Nova Campanha'...")
            if not self.try_multilingual_click('new_campaign_btn'):
                self.logger.warning("‚ö†Ô∏è Tentativa 1 falhou, tentando seletores alternativos...")
                
                # Tentar seletores alternativos mais robustos
                alternative_selectors = [
                    "//button[contains(@class, 'new-campaign') or contains(@class, 'create') or contains(@aria-label, 'Nova')]",
                    "//a[contains(text(), 'Nova') or contains(text(), 'New') or contains(text(), 'Create')]",
                    "//button[contains(@data-track, 'create') or contains(@data-action, 'new')]",
                    "//div[@role='button'][contains(text(), '+') or contains(text(), 'Nova')]"
                ]
                
                success = False
                for i, alt_selector in enumerate(alternative_selectors):
                    self.logger.info(f"üîÑ Tentativa alternativa {i+1}: {alt_selector[:50]}...")
                    if self.click_element_safe(alt_selector):
                        self.logger.info(f"‚úÖ SUCESSO com seletor alternativo {i+1}!")
                        success = True
                        break
                
                if not success:
                    self.logger.error("üí• FALHA TOTAL: Nenhum bot√£o 'Nova Campanha' encontrado")
                    self.take_screenshot("erro_nova_campanha.png")
                    return False
            else:
                self.logger.info("‚úÖ PASSO 1 CONCLU√çDO: Bot√£o 'Nova Campanha' clicado!")
            
            self.wait_for_page_load()
            self.logger.info("‚è≥ Aguardando carregamento da p√°gina...")
            
            # PASSO 2: Selecionar objetivo (se aparecer)
            self.logger.info("üéØ PASSO 2: Tentando selecionar objetivo da campanha...")
            objective_success = False
            objectives = [
                "//button[contains(text(), 'sem orienta√ß√£o') or contains(text(), 'without goal')]",
                "//div[contains(text(), 'Vendas') or contains(text(), 'Sales')]",
                "//div[contains(text(), 'Leads')]", 
                "//div[contains(text(), 'Tr√°fego') or contains(text(), 'Traffic')]"
            ]
            
            for i, obj_selector in enumerate(objectives):
                self.logger.info(f"üéØ Tentando objetivo {i+1}...")
                if self.click_element_safe(obj_selector):
                    self.logger.info(f"‚úÖ OBJETIVO SELECIONADO: {obj_selector[:30]}...")
                    objective_success = True
                    break
            
            if not objective_success:
                self.logger.info("‚ÑπÔ∏è Nenhum objetivo selecionado (pode n√£o ser necess√°rio)")
            
            self.wait_for_page_load()
            
            # PASSO 3: Selecionar tipo de campanha (Pesquisa)
            self.logger.info("üîç PASSO 3: Selecionando tipo 'Pesquisa/Search'...")
            if not self.try_multilingual_click('search_network'):
                self.logger.warning("‚ö†Ô∏è Seletores multil√≠ngues falharam, tentando alternativos...")
                
                search_selectors = [
                    "//div[contains(@class, 'campaign-type')]//*[contains(text(), 'Pesquisa') or contains(text(), 'Search')]",
                    "//button[contains(text(), 'Pesquisa') or contains(text(), 'Search')]",
                    "//div[@role='button'][contains(text(), 'Pesquisa') or contains(text(), 'Search')]",
                    "//label[contains(text(), 'Pesquisa') or contains(text(), 'Search')]/..//input"
                ]
                
                search_success = False
                for i, search_sel in enumerate(search_selectors):
                    self.logger.info(f"üîç Tentando seletor de pesquisa {i+1}...")
                    if self.click_element_safe(search_sel):
                        self.logger.info(f"‚úÖ PESQUISA SELECIONADA: {search_sel[:30]}...")
                        search_success = True
                        break
                
                if not search_success:
                    self.logger.error("üí• FALHA: N√£o conseguiu selecionar tipo 'Pesquisa'")
                    self.take_screenshot("erro_tipo_pesquisa.png")
                    return False
            else:
                self.logger.info("‚úÖ PASSO 3 CONCLU√çDO: Tipo 'Pesquisa' selecionado!")
            
            self.wait_for_page_load()
            
            # PASSO 4: Continuar com configura√ß√£o detalhada
            self.logger.info("‚û°Ô∏è INICIANDO configura√ß√£o detalhada da campanha...")
            return self.configure_campaign_details(config)
            
        except Exception as e:
            self.logger.error(f"üí• ERRO CR√çTICO na cria√ß√£o da campanha: {str(e)}")
            self.take_screenshot("erro_criacao_campanha.png")
            return False
    
    def create_campaign_google_ads_official_flow(self, config: Dict) -> bool:
        """Seguir exatamente o passo a passo oficial do Google Ads"""
        try:
            self.logger.info("üöÄ Iniciando cria√ß√£o de campanha seguindo fluxo oficial do Google Ads...")
            
            # PASSO 1-2: Acessar se√ß√£o Campanhas e iniciar nova campanha
            if not self.step_1_2_start_new_campaign():
                return False
            
            # PASSO 3: Escolher objetivo da campanha
            if not self.step_3_choose_campaign_objective(config):
                return False
            
            # PASSO 4: Selecionar tipo de campanha (Rede de Pesquisa)
            if not self.step_4_select_search_network():
                return False
            
            # PASSO 5: Definir nome da campanha
            if not self.step_5_define_campaign_name(config):
                return False
            
            # PASSO 6: Configurar defini√ß√µes da campanha
            if not self.step_6_configure_campaign_settings(config):
                return False
            
            # PASSO 7: Criar grupos de an√∫ncios
            if not self.step_7_create_ad_groups(config):
                return False
            
            # PASSO 8: Criar an√∫ncios de pesquisa responsivos
            if not self.step_8_create_responsive_search_ads(config):
                return False
            
            # PASSO 9: Adicionar extens√µes de an√∫ncio
            if not self.step_9_add_ad_extensions(config):
                return False
            
            # PASSO 10: Revisar e publicar campanha
            if not self.step_10_review_and_publish():
                return False
            
            self.logger.info("‚úÖ Campanha criada com sucesso seguindo fluxo oficial!")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro na cria√ß√£o da campanha: {str(e)}")
            return False
    
    def step_1_2_start_new_campaign(self) -> bool:
        """PASSO 1-2: üöÄ Navega√ß√£o SUPER ROBUSTA para Nova Campanha"""
        try:
            self.logger.info("üöÄ PASSO 1-2: Navega√ß√£o multil√≠ngue para Nova Campanha...")
            
            # Detectar idioma da interface automaticamente
            self.detect_interface_language()
            
            # Passo 1: Clicar no menu Campanhas (multil√≠ngue)
            def click_campaigns_menu():
                return self.try_multilingual_click('campaigns_menu')
            
            self.smart_wait_and_retry(click_campaigns_menu, 3, "Clique no menu Campanhas")
            
            # Passo 2: Clicar no bot√£o Nova Campanha (multil√≠ngue)
            def click_new_campaign():
                return self.try_multilingual_click('new_campaign_btn')
            
            if self.smart_wait_and_retry(click_new_campaign, 5, "Clique no bot√£o Nova Campanha"):
                self.logger.info("üéâ PASSO 1-2 COMPLETADO COM SUCESSO!")
                return True
            
            self.logger.error("üí• FALHA TOTAL no PASSO 1-2")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no PASSO 1-2: {str(e)}")
            return False
    
    def step_3_choose_campaign_objective(self, config: Dict) -> bool:
        """PASSO 3: üéØ Sele√ß√£o MULTIL√çNGUE dos 4 objetivos que suportam pesquisa"""
        try:
            self.logger.info("üéØ PASSO 3: Sele√ß√£o multil√≠ngue de objetivo (APENAS pesquisa)...")
            
            # Prioridade 1: SEM ORIENTA√á√ÉO (conforme instru√ß√£o do usu√°rio)
            def try_sem_orientacao():
                return self.try_multilingual_click('objectives', 'sem_orientacao')
            
            if self.smart_wait_and_retry(try_sem_orientacao, 3, "Sele√ß√£o: SEM ORIENTA√á√ÉO"):
                self.logger.info("üöÄ OBJETIVO SELECIONADO: SEM ORIENTA√á√ÉO (PRIORIDADE)")
                return True
            
            # Prioridade 2: VENDAS
            def try_vendas():
                return self.try_multilingual_click('objectives', 'vendas')
            
            if self.smart_wait_and_retry(try_vendas, 3, "Sele√ß√£o: VENDAS"):
                self.logger.info("üí∞ OBJETIVO SELECIONADO: VENDAS")
                return True
            
            # Prioridade 3: LEADS
            def try_leads():
                return self.try_multilingual_click('objectives', 'leads')
            
            if self.smart_wait_and_retry(try_leads, 3, "Sele√ß√£o: LEADS"):
                self.logger.info("üìß OBJETIVO SELECIONADO: LEADS")
                return True
            
            # Prioridade 4: TR√ÅFEGO DO SITE
            def try_trafego():
                return self.try_multilingual_click('objectives', 'trafego')
            
            if self.smart_wait_and_retry(try_trafego, 3, "Sele√ß√£o: TR√ÅFEGO"):
                self.logger.info("üåê OBJETIVO SELECIONADO: TR√ÅFEGO DO SITE")
                return True
            
            # Se n√£o encontrou nenhum dos 4, continuar mesmo assim
            self.logger.warning("‚ö†Ô∏è Nenhum dos 4 objetivos encontrado, mas continuando...")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no PASSO 3: {str(e)}")
            return False
    
    def step_4_select_search_network(self) -> bool:
        """PASSO 4: üîç Sele√ß√£o MULTIL√çNGUE da Rede de Pesquisa"""
        try:
            self.logger.info("üîç PASSO 4: Sele√ß√£o multil√≠ngue da Rede de Pesquisa...")
            
            def select_search_network():
                return self.try_multilingual_click('search_network')
            
            if self.smart_wait_and_retry(select_search_network, 5, "Sele√ß√£o da Rede de Pesquisa"):
                self.logger.info("üéâ REDE DE PESQUISA SELECIONADA COM SUCESSO!")
                return True
            
            self.logger.error("üí• FALHA TOTAL: N√£o foi poss√≠vel selecionar Rede de Pesquisa")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no PASSO 4: {str(e)}")
            return False
    
    def step_5_define_campaign_name(self, config: Dict) -> bool:
        """PASSO 5: üìù Defini√ß√£o MULTIL√çNGUE do nome da campanha"""
        try:
            self.logger.info("üìù PASSO 5: Defini√ß√£o multil√≠ngue do nome da campanha...")
            
            campaign_name = config.get('campaign_name', '').strip()
            
            # SE N√ÉO ESTIVER PREENCHIDO, PULAR (conforme instru√ß√£o)
            if not campaign_name:
                self.logger.info("‚ö†Ô∏è Nome da campanha n√£o preenchido - PULANDO PASSO 5")
                return True
            
            def input_campaign_name():
                return self.try_multilingual_input('campaign_name', campaign_name)
            
            if self.smart_wait_and_retry(input_campaign_name, 3, f"Inserir nome: {campaign_name}"):
                self.logger.info(f"üéâ NOME DA CAMPANHA DEFINIDO: {campaign_name}")
                return True
            
            self.logger.warning("‚ö†Ô∏è N√£o conseguiu inserir nome, mas continuando...")
            return True  # N√£o √© cr√≠tico
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no PASSO 5: {str(e)}")
            return True
    
    def step_6_configure_campaign_settings(self, config: Dict) -> bool:
        """PASSO 6: Configurar defini√ß√µes da campanha (redes, localiza√ß√£o, idioma, or√ßamento, lances)"""
        try:
            self.logger.info("‚öôÔ∏è PASSO 6: Configurando defini√ß√µes da campanha...")
            
            # 6.1: Desmarcar "Incluir parceiros de pesquisa do Google"
            search_partners_selectors = [
                "//input[@type='checkbox'][contains(@aria-label, 'parceiros')] | //input[@type='checkbox'][contains(@aria-label, 'partners')]",
                "//input[@type='checkbox'][contains(@name, 'search-partners')]",
                "//label[contains(text(), 'parceiros')]//input[@type='checkbox']"
            ]
            
            for selector in search_partners_selectors:
                try:
                    if self.driver:
                        element = self.driver.find_element(By.XPATH, selector)
                        if element.is_selected():
                            element.click()
                            self.logger.info("‚úÖ Desmarcou parceiros de pesquisa")
                            time.sleep(1)
                            break
                except:
                    continue
            
            # 6.2: Configurar localiza√ß√£o(s)
            locations = config.get('locations', ['Brasil'])
            if isinstance(locations, str):
                locations = [locations]
            
            for location in locations:
                location_selectors = [
                    "//input[contains(@aria-label, 'localiza√ß√£o')] | //input[contains(@aria-label, 'location')]",
                    "//input[contains(@placeholder, 'localiza√ß√£o')] | //input[contains(@placeholder, 'location')]",
                    "//input[contains(@data-testid, 'location')]"
                ]
                
                for selector in location_selectors:
                    if self.input_text_safe(selector, location, "xpath"):
                        # Aguardar sugest√µes e selecionar primeira
                        time.sleep(2)
                        try:
                            if self.driver:
                                suggestion = self.driver.find_element(By.XPATH, "//div[contains(@class, 'suggestion')] | //li[contains(@role, 'option')]")
                                suggestion.click()
                        except:
                            pass
                        break
            
            # 6.3: Configurar idioma
            language = config.get('language', 'Portugu√™s (Brasil)')
            language_selectors = [
                "//input[contains(@aria-label, 'idioma')] | //input[contains(@aria-label, 'language')]",
                "//select[contains(@aria-label, 'idioma')] | //select[contains(@aria-label, 'language')]"
            ]
            
            for selector in language_selectors:
                if self.input_text_safe(selector, language, "xpath"):
                    break
            
            # 6.4: Configurar or√ßamento di√°rio - MULTIL√çNGUE
            budget = config.get('budget', '').strip()
            if budget:
                def input_budget():
                    return self.try_multilingual_input('budget', budget)
                
                if self.smart_wait_and_retry(input_budget, 3, f"Inserir or√ßamento: R$ {budget}"):
                    self.logger.info(f"üí∞ OR√áAMENTO DEFINIDO: R$ {budget}")
                else:
                    self.logger.warning("‚ö†Ô∏è N√£o conseguiu inserir or√ßamento, mas continuando...")
            else:
                self.logger.info("‚ö†Ô∏è Or√ßamento n√£o preenchido - PULANDO")
            
            # 6.5: Configurar estrat√©gia de lances (Maximizar cliques por padr√£o)
            bidding_selectors = [
                "//div[contains(text(), 'Maximizar cliques')] | //div[contains(text(), 'Maximize clicks')]",
                "//button[contains(text(), 'Maximizar cliques')] | //button[contains(text(), 'Maximize clicks')]"
            ]
            
            for selector in bidding_selectors:
                if self.click_element_safe(selector, "xpath"):
                    self.logger.info("‚úÖ Estrat√©gia de lances configurada")
                    break
            
            # Continuar para pr√≥ximo passo
            continue_selectors = [
                "//button[contains(text(), 'Continuar')] | //button[contains(text(), 'Continue')]",
                "//button[contains(text(), 'Pr√≥ximo')] | //button[contains(text(), 'Next')]",
                "//button[contains(@aria-label, 'Continuar')] | //button[contains(@aria-label, 'Continue')]"
            ]
            
            for selector in continue_selectors:
                if self.click_element_safe(selector, "xpath"):
                    self.wait_for_page_load()
                    break
            
            self.logger.info("‚úÖ Defini√ß√µes da campanha configuradas")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro no PASSO 6: {str(e)}")
            return False
    
    def step_7_create_ad_groups(self, config: Dict) -> bool:
        """PASSO 7: Criar grupos de an√∫ncios"""
        try:
            self.logger.info("üìÅ PASSO 7: Criando grupos de an√∫ncios...")
            
            # 7.1: Dar nome ao grupo de an√∫ncios
            ad_group_name = f"Grupo de An√∫ncios - {config.get('campaign_name', 'Principal')}"
            
            ad_group_name_selectors = [
                "//input[contains(@aria-label, 'grupo')] | //input[contains(@aria-label, 'group')]",
                "//input[contains(@placeholder, 'grupo')] | //input[contains(@placeholder, 'group')]",
                "//input[contains(@name, 'ad-group')]"
            ]
            
            for selector in ad_group_name_selectors:
                if self.input_text_safe(selector, ad_group_name, "xpath"):
                    self.logger.info(f"‚úÖ Nome do grupo de an√∫ncios: {ad_group_name}")
                    break
            
            # 7.2: Adicionar palavras-chave
            keywords = config.get('keywords', [])
            if keywords:
                keywords_text = '\\n'.join(keywords)
                
                keyword_selectors = [
                    "//textarea[contains(@aria-label, 'palavra')] | //textarea[contains(@aria-label, 'keyword')]",
                    "//textarea[contains(@placeholder, 'palavra')] | //textarea[contains(@placeholder, 'keyword')]",
                    "//input[contains(@aria-label, 'palavra')] | //input[contains(@aria-label, 'keyword')]"
                ]
                
                for selector in keyword_selectors:
                    if self.input_text_safe(selector, keywords_text, "xpath"):
                        self.logger.info(f"‚úÖ Adicionadas {len(keywords)} palavras-chave")
                        break
            
            # Continuar para an√∫ncios
            continue_selectors = [
                "//button[contains(text(), 'Continuar')] | //button[contains(text(), 'Continue')]",
                "//button[contains(text(), 'Pr√≥ximo')] | //button[contains(text(), 'Next')]"
            ]
            
            for selector in continue_selectors:
                if self.click_element_safe(selector, "xpath"):
                    self.wait_for_page_load()
                    break
            
            return True
            
        except Exception as e:
            self.logger.error(f"Erro no PASSO 7: {str(e)}")
            return False
    
    def step_8_create_responsive_search_ads(self, config: Dict) -> bool:
        """PASSO 8: Criar an√∫ncios de pesquisa responsivos (at√© 15 t√≠tulos, 4 descri√ß√µes)"""
        try:
            self.logger.info("üìù PASSO 8: Criando an√∫ncios de pesquisa responsivos...")
            
            # 8.1: URL final - MULTIL√çNGUE
            landing_url = config.get('landing_url', '').strip()
            if landing_url:
                def input_url():
                    return self.try_multilingual_input('url', landing_url)
                
                if self.smart_wait_and_retry(input_url, 3, f"Inserir URL: {landing_url}"):
                    self.logger.info(f"üåê URL FINAL DEFINIDA: {landing_url}")
                else:
                    self.logger.warning("‚ö†Ô∏è N√£o conseguiu inserir URL, mas continuando...")
            else:
                self.logger.info("‚ö†Ô∏è URL final n√£o preenchida - PULANDO")
            
            # 8.2: T√≠tulos (at√© 15, m√°ximo 30 caracteres cada) - PULA se n√£o preenchido
            ad_titles = config.get('ad_titles', [])
            if ad_titles and any(title.strip() for title in ad_titles):  # Verifica se tem t√≠tulos preenchidos
                for i, title in enumerate(ad_titles[:15]):  # M√°ximo 15 t√≠tulos
                    title = title.strip()
                    if not title:  # Pula t√≠tulos vazios
                        continue
                        
                    if len(title) > 30:
                        title = title[:30]  # M√°ximo 30 caracteres
                    
                    title_selectors = [
                        f"//input[contains(@aria-label, 'T√≠tulo {i+1}')] | //input[contains(@aria-label, 'Headline {i+1}')]",
                        f"//input[contains(@placeholder, 'T√≠tulo {i+1}')] | //input[contains(@placeholder, 'Headline {i+1}')]",
                        f"//input[contains(@name, 'headline-{i}')]"
                    ]
                    
                    for selector in title_selectors:
                        if self.input_text_safe(selector, title, "xpath"):
                            self.logger.info(f"‚úÖ T√≠tulo {i+1}: {title}")
                            break
            else:
                self.logger.info("‚ö†Ô∏è T√≠tulos n√£o preenchidos - PULANDO configura√ß√£o de t√≠tulos")
            
            # 8.3: Descri√ß√µes (at√© 4, m√°ximo 90 caracteres cada) - PULA se n√£o preenchido
            ad_descriptions = config.get('ad_descriptions', [])
            if ad_descriptions and any(desc.strip() for desc in ad_descriptions):  # Verifica se tem descri√ß√µes preenchidas
                for i, description in enumerate(ad_descriptions[:4]):  # M√°ximo 4 descri√ß√µes
                    description = description.strip()
                    if not description:  # Pula descri√ß√µes vazias
                        continue
                        
                    if len(description) > 90:
                        description = description[:90]  # M√°ximo 90 caracteres
                    
                    desc_selectors = [
                        f"//textarea[contains(@aria-label, 'Descri√ß√£o {i+1}')] | //textarea[contains(@aria-label, 'Description {i+1}')]",
                        f"//textarea[contains(@placeholder, 'Descri√ß√£o {i+1}')] | //textarea[contains(@placeholder, 'Description {i+1}')]",
                        f"//textarea[contains(@name, 'description-{i}')]"
                    ]
                    
                    for selector in desc_selectors:
                        if self.input_text_safe(selector, description, "xpath"):
                            self.logger.info(f"‚úÖ Descri√ß√£o {i+1}: {description}")
                            break
            else:
                self.logger.info("‚ö†Ô∏è Descri√ß√µes n√£o preenchidas - PULANDO configura√ß√£o de descri√ß√µes")
            
            # 8.4: Caminhos de exibi√ß√£o (at√© 2, 15 caracteres cada)
            display_paths = ["oferta", "especial"]  # Valores padr√£o
            for i, path in enumerate(display_paths[:2]):
                if len(path) > 15:
                    path = path[:15]
                
                path_selectors = [
                    f"//input[contains(@aria-label, 'Caminho {i+1}')] | //input[contains(@aria-label, 'Path {i+1}')]",
                    f"//input[contains(@name, 'path-{i}')]"
                ]
                
                for selector in path_selectors:
                    if self.input_text_safe(selector, path, "xpath"):
                        self.logger.info(f"‚úÖ Caminho {i+1}: {path}")
                        break
            
            self.logger.info("‚úÖ An√∫ncios responsivos criados")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro no PASSO 8: {str(e)}")
            return False
    
    def step_9_add_ad_extensions(self, config: Dict) -> bool:
        """PASSO 9: Adicionar extens√µes de an√∫ncio (sitelink, chamada, local)"""
        try:
            self.logger.info("üîó PASSO 9: Adicionando extens√µes de an√∫ncio...")
            
            # Tentar clicar em "Adicionar extens√µes" ou pular se opcional
            extension_selectors = [
                "//button[contains(text(), 'Adicionar extens√µes')] | //button[contains(text(), 'Add extensions')]",
                "//a[contains(text(), 'extens√µes')] | //a[contains(text(), 'extensions')]",
                "//button[contains(text(), 'Pular')] | //button[contains(text(), 'Skip')]"
            ]
            
            for selector in extension_selectors:
                if self.click_element_safe(selector, "xpath"):
                    if 'Skip' in selector or 'Pular' in selector:
                        self.logger.info("‚ö†Ô∏è Extens√µes puladas (opcional)")
                    else:
                        self.logger.info("‚úÖ Extens√µes de an√∫ncio configuradas")
                    return True
            
            # Se n√£o encontrar, continuar (extens√µes s√£o opcionais)
            self.logger.info("‚ÑπÔ∏è Se√ß√£o de extens√µes n√£o encontrada, continuando...")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro no PASSO 9: {str(e)}")
            return False
    
    def step_10_review_and_publish(self) -> bool:
        """PASSO 10: Revisar todas as configura√ß√µes e publicar campanha"""
        try:
            self.logger.info("üöÄ PASSO 10: Revisando e publicando campanha...")
            
            # Procurar bot√µes de publicar/finalizar
            publish_selectors = [
                "//button[contains(text(), 'Publicar')] | //button[contains(text(), 'Publish')]",
                "//button[contains(text(), 'Criar campanha')] | //button[contains(text(), 'Create campaign')]",
                "//button[contains(text(), 'Finalizar')] | //button[contains(text(), 'Finish')]",
                "//button[contains(@aria-label, 'Publicar')] | //button[contains(@aria-label, 'Publish')]"
            ]
            
            for selector in publish_selectors:
                if self.click_element_safe(selector, "xpath"):
                    self.wait_for_page_load(timeout=30)  # Publica√ß√£o pode demorar
                    self.logger.info("üéâ CAMPANHA PUBLICADA COM SUCESSO!")
                    return True
            
            self.logger.error("‚ùå N√£o foi poss√≠vel encontrar bot√£o de publicar")
            return False
            
        except Exception as e:
            self.logger.error(f"Erro no PASSO 10: {str(e)}")
            return False
    
    def configure_campaign_details(self, config: Dict) -> bool:
        """üìù Configurar detalhes espec√≠ficos da campanha com LOGS DETALHADOS"""
        try:
            self.logger.info("üìù INICIANDO configura√ß√£o de detalhes da campanha...")
            
            # Nome da campanha
            campaign_name = config.get('campaign_name', 'Campanha Teste')
            self.logger.info(f"üè∑Ô∏è Inserindo nome da campanha: {campaign_name}")
            if not self.try_multilingual_input('campaign_name', campaign_name):
                self.logger.error("‚ùå FALHA ao inserir nome da campanha")
                return False
            self.logger.info("‚úÖ Nome da campanha inserido com sucesso")
            
            # Or√ßamento
            budget = str(config.get('daily_budget', 50))
            self.logger.info(f"üí∞ Inserindo or√ßamento di√°rio: R$ {budget}")
            if not self.try_multilingual_input('budget', budget):
                self.logger.error("‚ùå FALHA ao inserir or√ßamento")
                return False
            self.logger.info("‚úÖ Or√ßamento inserido com sucesso")
            
            # Localiza√ß√£o  
            locations = config.get('target_locations', ['Brasil'])
            location_text = ', '.join(locations)
            self.logger.info(f"üåç Inserindo localiza√ß√£o: {location_text}")
            if not self.try_multilingual_input('location', location_text):
                self.logger.error("‚ùå FALHA ao inserir localiza√ß√£o")
                return False
            self.logger.info("‚úÖ Localiza√ß√£o inserida com sucesso")
            
            # Continuar para pr√≥xima etapa
            self.logger.info("‚û°Ô∏è Clicando em 'Continuar' para pr√≥xima etapa...")
            if not self.try_multilingual_click('continue_btn'):
                self.logger.error("‚ùå FALHA ao clicar em 'Continuar'")
                return False
            
            self.logger.info("üéâ DETALHES DA CAMPANHA configurados com SUCESSO!")
            self.wait_for_page_load()
            return True
            
        except Exception as e:
            self.logger.error(f"üí• ERRO GRAVE ao configurar detalhes da campanha: {str(e)}")
            return False
    
    def configure_ad_groups_and_keywords(self, config: Dict) -> bool:
        """üîë Configurar grupos de an√∫ncios e palavras-chave com LOGS DETALHADOS"""
        try:
            self.logger.info("üîë INICIANDO configura√ß√£o de palavras-chave...")
            
            # Adicionar palavras-chave
            keywords = config.get('keywords', ['palavra-chave exemplo'])
            keywords_text = '\n'.join(keywords)
            
            self.logger.info(f"üéØ Inserindo {len(keywords)} palavras-chave: {keywords[:3]}...")
            if not self.try_multilingual_input('keywords', keywords_text):
                self.logger.error("‚ùå FALHA ao inserir palavras-chave")
                return False
            self.logger.info("‚úÖ Palavras-chave inseridas com sucesso")
            
            # Continuar para an√∫ncios
            self.logger.info("‚û°Ô∏è Clicando em 'Continuar' para configurar an√∫ncios...")
            if not self.try_multilingual_click('continue_btn'):
                self.logger.error("‚ùå FALHA ao clicar em 'Continuar' ap√≥s palavras-chave")
                return False
            
            self.logger.info("üéâ PALAVRAS-CHAVE configuradas com SUCESSO!")
            self.wait_for_page_load()
            return True
            
        except Exception as e:
            self.logger.error(f"üí• ERRO GRAVE ao configurar palavras-chave: {str(e)}")
            return False
    
    def configure_ads(self, config: Dict) -> bool:
        """üì¢ Configurar an√∫ncios com LOGS DETALHADOS"""
        try:
            self.logger.info("üì¢ INICIANDO configura√ß√£o de an√∫ncios...")
            
            # T√≠tulos do an√∫ncio (at√© 15 t√≠tulos no Google Ads)
            headlines = config.get('ad_headlines', ['T√≠tulo do An√∫ncio 1', 'T√≠tulo do An√∫ncio 2'])
            self.logger.info(f"üìù Inserindo {len(headlines)} t√≠tulos de an√∫ncio...")
            for i, headline in enumerate(headlines[:3]):  # Limitar a 3 por simplicidade
                if not self.try_multilingual_input('headlines', headline):
                    self.logger.warning(f"‚ö†Ô∏è Falha ao inserir t√≠tulo {i+1}: {headline}")
                else:
                    self.logger.info(f"‚úÖ T√≠tulo {i+1} inserido: {headline}")
            
            # Descri√ß√µes do an√∫ncio (at√© 4 descri√ß√µes no Google Ads)
            descriptions = config.get('ad_descriptions', ['Descri√ß√£o do an√∫ncio exemplo'])
            self.logger.info(f"üìÑ Inserindo {len(descriptions)} descri√ß√µes de an√∫ncio...")
            for i, desc in enumerate(descriptions[:2]):  # Limitar a 2 por simplicidade
                if not self.try_multilingual_input('descriptions', desc):
                    self.logger.warning(f"‚ö†Ô∏è Falha ao inserir descri√ß√£o {i+1}: {desc}")
                else:
                    self.logger.info(f"‚úÖ Descri√ß√£o {i+1} inserida: {desc}")
            
            # URL de destino
            final_url = config.get('final_url', 'https://exemplo.com')
            self.logger.info(f"üîó Inserindo URL de destino: {final_url}")
            if not self.try_multilingual_input('url', final_url):
                self.logger.error("‚ùå FALHA ao inserir URL de destino")
                return False
            self.logger.info("‚úÖ URL de destino inserida com sucesso")
            
            # Publicar campanha
            self.logger.info("üöÄ TENTANDO publicar a campanha...")
            if not self.try_multilingual_click('publish_btn'):
                self.logger.warning("‚ö†Ô∏è Bot√£o 'Publicar' n√£o encontrado, tentando 'Continuar' primeiro...")
                
                # Tentar continuar primeiro
                if self.try_multilingual_click('continue_btn'):
                    self.logger.info("‚úÖ Clicou em 'Continuar', tentando 'Publicar' novamente...")
                    self.wait_for_page_load()
                    
                    if not self.try_multilingual_click('publish_btn'):
                        self.logger.error("‚ùå FALHA TOTAL ao publicar campanha")
                        return False
                else:
                    self.logger.error("‚ùå FALHA TOTAL - nem 'Continuar' nem 'Publicar' funcionaram")
                    return False
            
            self.logger.info("üéâ CAMPANHA PUBLICADA COM SUCESSO!")
            self.wait_for_page_load(timeout=30)  # Publica√ß√£o pode demorar
            return True
            
        except Exception as e:
            self.logger.error(f"üí• ERRO GRAVE ao configurar an√∫ncios: {str(e)}")
            return False
    
    def create_campaign_with_browser(self, profile: Dict, config: Dict, browser_info: Dict) -> bool:
        """üöÄ Fun√ß√£o principal SUPER ROBUSTA para criar campanha com SCREENSHOTS em CADA ETAPA"""
        try:
            self.logger.info(f"üöÄ INICIANDO automa√ß√£o COMPLETA para perfil: {profile['name']}")
            
            # ETAPA 1: Configurar driver do Selenium
            self.logger.info("üîß ETAPA 1: Configurando driver do Selenium...")
            self.take_screenshot("etapa_1_antes_driver.png")
            
            headless = config.get('headless', False)
            if not self.setup_driver(browser_info, headless):
                self.logger.error("‚ùå FALHA na ETAPA 1: N√£o foi poss√≠vel configurar o driver")
                self.take_screenshot("etapa_1_erro_driver.png")
                return False
            
            self.logger.info("‚úÖ ETAPA 1 COMPLETA: Driver configurado com sucesso")
            self.take_screenshot("etapa_1_driver_ok.png")
            
            # ETAPA 2: Preparar browser para navega√ß√£o calculada
            self.logger.info("üõ†Ô∏è ETAPA 2A: Preparando browser para controle total...")
            self.take_screenshot("etapa_2a_antes_preparacao.png")
            
            if not self.prepare_browser_for_navigation():
                self.logger.error("‚ùå FALHA na ETAPA 2A: N√£o conseguiu preparar browser")
                self.take_screenshot("etapa_2a_erro_preparacao.png")
                return False
            
            self.logger.info("‚úÖ ETAPA 2A COMPLETA: Browser preparado para controle total")
            self.take_screenshot("etapa_2a_preparacao_ok.png")
            
            # ETAPA 2B: Navega√ß√£o EXTREMAMENTE CALCULADA
            self.logger.info("üßÆ ETAPA 2B: Navega√ß√£o EXTREMAMENTE CALCULADA para Google Ads...")
            self.take_screenshot("etapa_2b_antes_navegacao.png")
            
            # Tentar m√∫ltiplas URLs com navega√ß√£o calculada
            target_urls = [
                "https://ads.google.com/aw/",
                "https://ads.google.com/home/",
                "https://ads.google.com/",
                "https://ads.google.com/aw/campaigns/",
                "https://ads.google.com/aw/overview/"
            ]
            
            navigation_success = False
            for attempt, url in enumerate(target_urls, 1):
                self.logger.info(f"üéØ TENTATIVA {attempt}: Navega√ß√£o calculada para {url}")
                
                if self.navigate_with_extreme_calculation(url):
                    self.logger.info(f"‚úÖ SUCESSO na tentativa {attempt}!")
                    navigation_success = True
                    break
                else:
                    self.logger.warning(f"‚ö†Ô∏è Tentativa {attempt} falhou, tentando pr√≥xima...")
                    time.sleep(2)  # Pausa entre tentativas
            
            if not navigation_success:
                self.logger.error("‚ùå FALHA na ETAPA 2B: Todas as tentativas de navega√ß√£o falharam")
                self.take_screenshot("etapa_2b_erro_navegacao.png")
                return False
            
            self.logger.info("‚úÖ ETAPA 2B COMPLETA: Navega√ß√£o calculada bem-sucedida")
            self.take_screenshot("etapa_2b_navegacao_ok.png")
            
            # ETAPA 3: Aguardar carregamento e verificar estado
            self.logger.info("‚è≥ ETAPA 3: Verificando estado da p√°gina ap√≥s navega√ß√£o...")
            self.wait_for_page_load()
            self.take_screenshot("etapa_3_pagina_carregada.png")
            
            # Verificar se realmente est√° na p√°gina certa
            try:
                if not self.driver:
                    self.logger.error("‚ùå FALHA na ETAPA 3: Driver n√£o est√° dispon√≠vel")
                    return False
                    
                current_url = self.driver.current_url
                title = self.driver.title
                self.logger.info(f"üìç URL atual: {current_url}")
                self.logger.info(f"üìÑ T√≠tulo: {title}")
                
                if "ads.google.com" not in current_url.lower():
                    self.logger.error(f"‚ùå FALHA na ETAPA 3: URL incorreta: {current_url}")
                    self.take_screenshot("etapa_3_url_incorreta.png")
                    return False
                    
            except Exception as e:
                self.logger.error(f"‚ùå FALHA na ETAPA 3: Erro ao verificar estado: {str(e)}")
                self.take_screenshot("etapa_3_erro_verificacao.png")
                return False
            
            self.logger.info("‚úÖ ETAPA 3 COMPLETA: Estado da p√°gina verificado")
            
            # ETAPA 4: Iniciar cria√ß√£o de campanha
            self.logger.info("üìù ETAPA 4: INICIANDO cria√ß√£o de campanha step-by-step...")
            self.take_screenshot("etapa_4_antes_campanha.png")
            
            success = self.create_campaign_step_by_step(config)
            
            if success:
                self.logger.info("üéâ ETAPA 4 COMPLETA: Campanha criada com SUCESSO!")
                self.take_screenshot("etapa_4_campanha_sucesso.png")
                self.logger.info(f"‚úÖ Campanha '{config.get('campaign_name', 'Sem nome')}' criada com sucesso no perfil {profile['name']}")
            else:
                self.logger.error("‚ùå FALHA na ETAPA 4: Cria√ß√£o de campanha falhou")
                self.take_screenshot("etapa_4_campanha_erro.png")
                self.logger.error(f"‚ùå Falha ao criar campanha no perfil {profile['name']}")
            
            # ETAPA 5: Verifica√ß√£o final e limpeza
            self.logger.info("üßπ ETAPA 5: Verifica√ß√£o final e limpeza...")
            self.take_screenshot("etapa_5_final.png")
            
            return success
            
        except Exception as e:
            self.logger.error(f"üí• ERRO CR√çTICO na automa√ß√£o do perfil {profile['name']}: {str(e)}")
            self.take_screenshot("erro_critico_geral.png")
            return False
            
        finally:
            # Sempre limpar recursos
            try:
                self.logger.info("üßπ Limpando recursos do driver...")
                self.cleanup()
            except Exception as cleanup_error:
                self.logger.warning(f"‚ö†Ô∏è Erro ao limpar recursos: {str(cleanup_error)}")
    
    def create_campaign(self, profile: Dict, config: Dict) -> bool:
        """M√©todo legado - mantido para compatibilidade"""
        self.logger.warning("M√©todo create_campaign √© legado. Use create_campaign_with_browser.")
        browser_info = self.adspower_manager.start_browser(profile['user_id'])
        if not browser_info:
            return False
        try:
            return self.create_campaign_with_browser(profile, config, browser_info)
        finally:
            self.adspower_manager.stop_browser(profile['user_id'])
    
    def cleanup(self):
        """Limpar recursos do driver"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
                self.wait = None
                self.logger.info("Driver limpo com sucesso")
        except Exception as e:
            self.logger.error(f"Erro ao limpar driver: {str(e)}")
    
    def take_screenshot(self, filename: str | None = None) -> str | None:
        """Tirar screenshot para debugging"""
        try:
            if not self.driver:
                return None
                
            if not filename:
                timestamp = int(time.time())
                filename = f"screenshot_{timestamp}.png"
            
            screenshot_path = self.driver.save_screenshot(filename)
            self.logger.info(f"Screenshot salvo: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"Erro ao tirar screenshot: {str(e)}")
            return None
    
    def get_page_source(self) -> str:
        """Obter c√≥digo fonte da p√°gina para debugging"""
        try:
            if self.driver:
                return self.driver.page_source
            return ""
        except Exception as e:
            self.logger.error(f"Erro ao obter c√≥digo fonte: {str(e)}")
            return ""
    
    def detect_interface_language(self) -> str:
        """üåê Detectar automaticamente o idioma da interface do Google Ads"""
        try:
            self.logger.info("üîç Detectando idioma da interface do Google Ads...")
            
            # Palavras-chave para detectar idioma
            detection_words = {
                'pt': ['Campanhas', 'Nova campanha', 'Or√ßamento', 'Publicar', 'Continuar'],
                'en': ['Campaigns', 'New campaign', 'Budget', 'Publish', 'Continue'],
                'es': ['Campa√±as', 'Nueva campa√±a', 'Presupuesto', 'Publicar', 'Continuar']
            }
            
            if not self.driver:
                return 'pt'  # Padr√£o portugu√™s
            
            page_text = self.driver.page_source.lower()
            
            # Contar ocorr√™ncias para cada idioma
            scores = {}
            for lang, words in detection_words.items():
                scores[lang] = sum(1 for word in words if word.lower() in page_text)
            
            # Detectar idioma com maior pontua√ß√£o
            detected_lang = max(scores.keys(), key=lambda k: scores[k])
            
            if scores[detected_lang] > 0:
                self.current_language = detected_lang
                self.logger.info(f"üåê Idioma detectado: {detected_lang.upper()} (Score: {scores[detected_lang]})")
                return detected_lang
            else:
                self.logger.info("‚ö†Ô∏è N√£o foi poss√≠vel detectar idioma, usando portugu√™s como padr√£o")
                self.current_language = 'pt'
                return 'pt'
                
        except Exception as e:
            self.logger.error(f"Erro ao detectar idioma: {str(e)}")
            self.current_language = 'pt'
            return 'pt'
    
    def try_multilingual_click(self, selector_group: str, selector_key: str | None = None) -> bool:
        """üîÑ Tentar clique em m√∫ltiplos idiomas com v√°rias tentativas"""
        
        # Se idioma for auto, detectar primeiro
        if self.current_language == 'auto':
            self.detect_interface_language()
        
        languages = [self.current_language, 'pt', 'en', 'es']  # Prioridade: detectado, pt, en, es
        languages = list(dict.fromkeys(languages))  # Remover duplicatas
        
        for lang in languages:
            self.logger.info(f"üîÑ Tentando seletores em {lang.upper()}...")
            
            # Obter seletores para este idioma
            if selector_key:
                selectors = self.multilingual_selectors.get(selector_group, {}).get(selector_key, {}).get(lang, [])
            else:
                selectors = self.multilingual_selectors.get(selector_group, {}).get(lang, [])
            
            if not selectors:
                continue
            
            # Tentar cada seletor para este idioma
            for selector in selectors:
                if self.click_element_safe(selector):
                    self.logger.info(f"‚úÖ SUCESSO com seletor {lang.upper()}: {selector}")
                    return True
        
        self.logger.error(f"‚ùå FALHA TOTAL: Nenhum seletor funcionou para {selector_group}")
        return False
    
    def try_multilingual_input(self, selector_group: str, text: str) -> bool:
        """üìù Tentar inserir texto em campos usando seletores multil√≠ngues"""
        
        # Se idioma for auto, detectar primeiro
        if self.current_language == 'auto':
            self.detect_interface_language()
        
        languages = [self.current_language, 'pt', 'en', 'es']
        languages = list(dict.fromkeys(languages))
        
        for lang in languages:
            self.logger.info(f"üîÑ Tentando campos de input em {lang.upper()}...")
            
            selectors = self.multilingual_selectors.get('input_fields', {}).get(selector_group, {}).get(lang, [])
            
            if not selectors:
                continue
            
            for selector in selectors:
                if self.input_text_safe(selector, text, "xpath"):
                    self.logger.info(f"‚úÖ SUCESSO input {lang.upper()}: {text[:30]}...")
                    return True
        
        self.logger.error(f"‚ùå FALHA TOTAL: Nenhum campo de input funcionou para {selector_group}")
        return False
    
    def smart_wait_and_retry(self, action_func, max_attempts: int = 5, description: str = "a√ß√£o") -> bool:
        """üß† Sistema inteligente de espera e retry para qualquer a√ß√£o"""
        for attempt in range(max_attempts):
            try:
                self.logger.info(f"üîÑ Tentativa {attempt + 1}/{max_attempts}: {description}")
                
                # Aguardar carregamento da p√°gina
                self.wait_for_page_load()
                
                # Fechar popups que podem atrapalhar
                self.close_popups()
                
                # Executar a√ß√£o
                if action_func():
                    self.logger.info(f"‚úÖ SUCESSO na tentativa {attempt + 1}: {description}")
                    return True
                
                # Se falhou, aguardar mais um pouco e tentar novamente
                wait_time = self.retry_delay * (attempt + 1)  # Aumentar tempo progressivamente
                self.logger.warning(f"‚ö†Ô∏è Tentativa {attempt + 1} falhou, aguardando {wait_time}s...")
                time.sleep(wait_time)
                
            except Exception as e:
                self.logger.error(f"‚ùå Erro na tentativa {attempt + 1}: {str(e)}")
                if attempt < max_attempts - 1:
                    time.sleep(self.retry_delay * (attempt + 1))
        
        self.logger.error(f"üí• FALHA COMPLETA ap√≥s {max_attempts} tentativas: {description}")
        return False